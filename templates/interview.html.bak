<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DUF Tech Mülakat Asistanı</title>
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', filename='duftech-logo-final.svg') }}">
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Plus Jakarta Sans', sans-serif;
            background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
            min-height: 100vh;
            margin: 0;
            padding: 0;
            color: #1a202c;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding: 1rem;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 50;
        }

        .chat-container {
            width: 100%;
            max-width: 1200px;
            height: 100vh;
            margin: 0 auto;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .duftech-logo {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 180px;
            height: auto;
            z-index: 100;
            filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.1));
            transition: all 0.3s ease;
        }

        .duftech-logo:hover {
            transform: scale(1.05);
        }

        .duftech-avatar {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            border-radius: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            transition: all 0.3s ease;
        }

        .duftech-avatar i {
            font-size: 24px;
            color: #ffffff;
            transition: all 0.3s ease;
        }

        /* Robot Animasyonları */
        .duftech-avatar.speaking {
            background: linear-gradient(135deg, #00CED1 0%, #008B8B 100%);
            box-shadow: 0 0 15px rgba(0, 206, 209, 0.6);
        }

        .duftech-avatar.speaking i {
            color: #ffffff;
            animation: pulse 1.5s infinite;
        }

        .duftech-avatar.listening {
            background: linear-gradient(135deg, #C8A2C8 0%, #9370DB 100%);
            box-shadow: 0 0 15px rgba(147, 112, 219, 0.6);
        }

        .duftech-avatar.listening i {
            color: #ffffff;
            animation: wave 1.5s infinite;
        }

        .duftech-avatar.idle {
            background: #f0f0f0;
        }

        .duftech-avatar.idle i {
            color: #444444;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes wave {
            0% { transform: rotate(0deg); }
            50% { transform: rotate(180deg); }
            100% { transform: rotate(360deg); }
        }

        /* Modal Styles - temaya uygun hale getirildi */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(200, 162, 200, 0.2);
        }

        .modal-header {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            color: #00CED1;
            text-align: center;
            border-bottom: 2px solid rgba(0, 206, 209, 0.2);
            padding-bottom: 0.75rem;
        }

        .modal-body {
            margin-bottom: 1.5rem;
        }

        .modal-footer {
            text-align: center;
            margin-top: 2rem;
        }

        .modal-button {
            background: linear-gradient(135deg, #00CED1 0%, #008B8B 100%);
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .modal-button:hover {
            background: linear-gradient(135deg, #008B8B 0%, #006666 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 206, 209, 0.3);
        }
        
        /* Butonların yeni stili */
        .mode-buttons-container {
            position: fixed;
            bottom: 30px;
            left: 30px;
            display: flex;
            gap: 15px;
            z-index: 20;
        }
        
        .mode-toggle-button {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            font-weight: 500;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 20;
            background: linear-gradient(135deg, #00CED1 0%, #008B8B 100%);
            color: white;
            border: none;
        }
        
        .mode-toggle-button.manual {
            background: linear-gradient(135deg, #ff9a00 0%, #ff6a00 100%);
        }
        
        .end-button {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            font-weight: 500;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 20;
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            border: none;
        }
        
        .mode-toggle-button i,
        .end-button i {
            margin-right: 0.5rem;
            font-size: 1.1rem;
        }
        
        .mode-toggle-button:hover,
        .end-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }
        
        .report-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            background-image: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
        }
        
        .report-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(16, 185, 129, 0.3);
        }
        
        .report-button i {
            margin-right: 0.5rem;
        }
        
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
        }
        
        .start-button {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            padding: 0.85rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            font-size: 1.1rem;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 20;
            background: linear-gradient(135deg, #00CED1 0%, #008B8B 100%);
            color: white;
            border: none;
        }
        
        .start-button:hover {
            transform: translateX(-50%) translateY(-5px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.2);
        }
        
        .start-button i {
            margin-right: 0.75rem;
            font-size: 1.2rem;
        }
        
        .mode-info {
            position: fixed;
            bottom: 90px;
            left: 30px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(8px);
            border-radius: 12px;
            padding: 12px 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            max-width: 400px;
            border: 1px solid rgba(200, 162, 200, 0.3);
            z-index: 19;
        }
        
        .mode-info p {
            display: flex;
            align-items: center;
        }
        
        .mode-info i {
            color: #00CED1;
            margin-right: 8px;
        }
        
        .hidden {
            display: none !important;
        }

        .chat-messages {
            position: absolute;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
        }

        .chat-bubble {
            position: fixed;
            max-width: 400px;
            padding: 1.5rem;
            border-radius: 20px;
            background: white;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            pointer-events: auto;
            opacity: 0;
            transform: scale(0.8) translateY(20px);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .chat-bubble.active {
            opacity: 1;
            transform: scale(1) translateY(0);
        }

        .chat-bubble.fade-out {
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .assistant-bubble {
            left: 60%;
            top: 30%;
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .user-bubble {
            right: 60%;
            top: 60%;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .message-content {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .message-icon {
            flex-shrink: 0;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.1);
        }

        .assistant-bubble .message-icon {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .user-bubble .message-icon {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .message-text {
            flex-grow: 1;
            font-size: 1rem;
            line-height: 1.5;
        }

        .status-indicator {
            position: fixed;
            bottom: 80px;
            left: 20px;
            background: white;
            padding: 1rem 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.1rem;
            font-weight: 500;
            color: #4f46e5;
            transition: all 0.3s ease;
            white-space: nowrap;
            z-index: 11;
            min-width: 250px;
        }

        .status-indicator i {
            font-size: 1.4rem;
        }

        .status-indicator.speaking {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            animation: status-pulse 2s infinite;
        }

        .status-indicator.listening {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            animation: status-pulse 1s infinite;
        }

        .status-indicator.processing {
            background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
            color: white;
            animation: status-pulse 0.5s infinite;
        }

        .status-indicator.idle {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
        }

        @keyframes status-pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        .auto-mode .status-indicator {
            background: #4f46e5;
            color: white;
        }

        .auto-mode-indicator {
            display: inline-flex;
            align-items: center;
            margin-left: 0.5rem;
            animation: pulse 2s infinite;
        }

        .volume-waves {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            pointer-events: none;
        }

        .volume-waves::before,
        .volume-waves::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: rgba(79, 70, 229, 0.2);
            animation: waves 2s infinite;
        }

        .volume-waves::after {
            animation-delay: 1s;
        }

        @keyframes waves {
            0% {
                transform: scale(1);
                opacity: 0.5;
            }
            100% {
                transform: scale(1.5);
                opacity: 0;
            }
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .completed {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
        }
        
        .paused {
            opacity: 0.7;
        }

        /* Mod Durumu Bilgisi için stil */
        #modStatusBar {
            display: none;
            font-size: 0.95rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Kamera yeniden konumlandırıldı ve boyutu küçültüldü */
        .camera-container {
            position: fixed;
            top: 150px; /* Daha aşağıda */
            right: 35px; /* Daha sağda */
            width: 160px;
            height: 120px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            z-index: 40;
            display: block;
        }

        /* Header, kamera ve mod bilgisi için ayarlamalar */
        .header {
            top: 36px; /* Mod bilgi çubuğunun altına */
        }
        
        /* Mod Durumu Bilgisi için stil */
        #modStatusBar {
            display: none;
            font-size: 0.95rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Manuel mod için güçlendirilmiş stiller */
        .recording-active .status-indicator {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            animation: status-pulse 0.5s infinite;
            font-weight: bold;
        }
        
        .mode-toggle-button.active {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%) !important;
            box-shadow: 0 0 15px rgba(239, 68, 68, 0.4);
            transform: scale(1.05);
        }
        
        .record-indicator {
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        /* Manuel mod göstergesini daha belirgin hale getir */
        #manualModeStatus {
            padding: 4px 8px;
            border-radius: 6px;
            background-color: rgba(255, 106, 0, 0.15);
        }
        
        /* Space tuşu vurgusu */
        .keyboard-key {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background-color: #fff;
            border-radius: 4px;
            border: 1px solid rgba(255, 255, 255, 0.4);
            color: #333;
            padding: 2px 8px;
            font-size: 0.85em;
            font-weight: 600;
            box-shadow: 0 2px 0 rgba(0, 0, 0, 0.1);
            text-transform: uppercase;
            margin: 0 4px;
        }
        
        /* Kayıt aktif olduğunda görsel uyarı */
        .recording-active .record-indicator {
            animation: pulse 1s infinite;
            color: #ef4444;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .recording-active #statusText {
            color: #ef4444;
            font-weight: bold;
        }
        
        .recording-active #statusDot {
            background-color: #ef4444 !important;
            animation: pulseDot 1s infinite;
        }
        
        @keyframes pulseDot {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        /* Manuel mod butonu aktif olduğunda daha belirgin görünüm */
        #manualModeButton.active {
            background: linear-gradient(135deg, #ff9500 0%, #ff7800 100%);
            box-shadow: 0 0 15px rgba(255, 149, 0, 0.5);
            transform: scale(1.05);
        }
        
        /* Otomatik mod butonu aktif olduğunda daha belirgin görünüm */
        #autoModeButton.active {
            background: linear-gradient(135deg, #00CED1 0%, #008B8B 100%);
            box-shadow: 0 0 15px rgba(0, 206, 209, 0.5);
            transform: scale(1.05);
        }
        
        /* Manuel mod info paneli daha belirgin */
        #manualModeInfo {
            background-color: rgba(255, 149, 0, 0.1);
            border-left: 3px solid #ff9500;
            padding-left: 1rem;
        }
        
        /* Otomatik mod info paneli daha belirgin */
        #autoModeInfo {
            background-color: rgba(0, 206, 209, 0.1);
            border-left: 3px solid #00CED1;
            padding-left: 1rem;
        }

        /* Manuel kayıt için görsel geri bildirim stilleri */
        .recording-active .record-indicator {
            animation: pulse 1.5s infinite;
            background-color: #ef4444 !important;
        }
        
        #statusText.recording {
            color: #ef4444;
            font-weight: bold;
        }
        
        #statusDot.recording {
            background-color: #ef4444;
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        #manualModeButton.recording-active {
            background: linear-gradient(135deg, #ef4444 0%, #f97316 100%);
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
        }
        
        /* Manuel mod panel arka planı */
        #manualModeInfo {
            background-color: rgba(254, 242, 242, 0.8);
            border: 1px solid #ef4444;
            border-radius: 10px;
            padding: 10px 15px;
        }
        
        /* Otomatik mod panel arka planı */
        #autoModeInfo {
            background-color: rgba(236, 254, 255, 0.8);
            border: 1px solid #0891b2;
            border-radius: 10px;
            padding: 10px 15px;
        }
        
        /* Kayıt durumunu gösteren daire (ortadaki animasyon için) */
        .record-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: rgba(239, 68, 68, 0.5);
            display: none;
            z-index: 100;
        }
        
        .recording-active .record-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .record-indicator:after {
            content: "🎤";
            font-size: 32px;
        }

        /* Manuel mod görsel geri bildirimleri */
        .record-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: rgba(239, 68, 68, 0.2);
            box-shadow: 0 0 30px rgba(239, 68, 68, 0.3);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            pointer-events: none;
        }
        
        .recording-active .record-indicator {
            display: flex;
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { transform: translate(-50%, -50%) scale(1); opacity: 0.7; }
            50% { transform: translate(-50%, -50%) scale(1.05); opacity: 1; }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 0.7; }
        }
        
        /* Mod butonları için animasyonlar */
        #manualModeButton.recording-active {
            background: linear-gradient(135deg, #ef4444 0%, #f97316 100%) !important;
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(239, 68, 68, 0.5) !important;
        }
        
        /* Manuel mod için gülen yüz animasyonu */
        .smile-animation {
            animation: bounce 1s infinite;
            font-size: 40px;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        /* Status dot animasyonu */
        #statusDot.recording {
            animation: blink 1s infinite;
            background-color: #ef4444 !important;
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <!-- DUF Tech Logo -->
    <img src="{{ url_for('static', filename='duftech-interlocked-3d.svg') }}" alt="DUF Tech Logo" class="duftech-logo">

    <!-- DUF Tech Avatar -->
    <div class="duftech-avatar" id="duftechAvatar">
        <i class="fas fa-robot"></i>
    </div>

    <!-- Bilgilendirme Modal -->
    <div id="infoModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Mülakat Bilgilendirmesi
            </div>
            <div class="modal-body">
                <div class="space-y-4">
                    <div class="bg-teal-50 p-4 rounded-lg border border-teal-200">
                        <p class="text-teal-800 font-semibold mb-2">⚠️ Önemli Not:</p>
                        <p class="text-teal-700">Bu uygulama en iyi Google Chrome tarayıcısında çalışmaktadır. Lütfen Chrome kullanınız.</p>
                    </div>

                    <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
                        <p class="text-purple-800 font-semibold mb-2">🎯 Mülakat Modları:</p>
                        <div class="space-y-2">
                            <p class="flex items-center text-purple-700">
                                <i class="fas fa-microphone-alt mr-2"></i>
                                <strong>Otomatik Mod:</strong> Sesiniz algılandığında otomatik kayıt başlar ve durur
                            </p>
                            <p class="flex items-center text-purple-700">
                                <i class="fas fa-hand mr-2"></i>
                                <strong>Manuel Mod:</strong> Space tuşuna basılı tutarak konuşabilirsiniz
                            </p>
                        </div>
                    </div>

                    <div class="bg-teal-50 p-4 rounded-lg border border-teal-200">
                        <p class="text-teal-800 font-semibold mb-2">✅ Başlarken:</p>
                        <ul class="list-disc ml-6 space-y-2 text-teal-700">
                            <li>"Mülakata Başla" butonuna tıklayın</li>
                            <li>Mod butonuna tekrar tıklayarak otomatik/manuel arasında geçiş yapabilirsiniz</li>
                            <li>GPT'nin konuşması bitene kadar bekleyin</li>
                            <li>Net ve anlaşılır konuşun</li>
                            <li>Cevaplarınızı çok geciktirmeyin</li>
                        </ul>
                    </div>

                    <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
                        <p class="text-purple-800 font-semibold mb-2">❌ Dikkat Edilmesi Gerekenler:</p>
                        <ul class="list-disc ml-6 space-y-2 text-purple-700">
                            <li>Mikrofon izni vermeyi unutmayın</li>
                            <li>Gürültülü ortamlardan kaçının</li>
                            <li>Sistem sizi anlamadığında tekrar deneyin</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-button" onclick="closeModal()">Anladım, Başla</button>
            </div>
        </div>
    </div>

    <!-- Header -->
    <div class="header">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">{{ interview.candidate_name }}</h1>
                    <p class="text-gray-600">{{ interview.position }}</p>
                </div>
                <div class="text-right">
                    <p class="text-sm text-gray-500">Mülakat Kodu: {{ interview.code }}</p>
                    <p class="text-xs text-gray-500">{{ interview.created_at }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="chat-container">
        <!-- Chat Messages -->
        <div id="messages" class="chat-messages"></div>
    </div>

    <!-- Kamera Görüntüsü -->
    <div class="camera-container" id="cameraContainer">
        <video id="videoElement" autoplay playsinline></video>
        <canvas id="photoCanvas" style="display:none;"></canvas>
        <div class="camera-overlay" id="cameraOverlay">
            <div class="photo-flash" id="photoFlash"></div>
        </div>
    </div>

    <!-- Durum Göstergesi -->
    <div class="status-indicator">
        <div class="status-dot" id="statusDot"></div>
        <span id="statusText">Dinlemeye hazır</span>
    </div>

    <!-- Süre Sayacı -->
    <div class="timer">
        <i class="fas fa-clock"></i>
        <span id="interviewTimer">00:00</span>
    </div>

    <!-- Mod Durumu Bilgisi (DAHA YUKARI TAŞINDI) -->
    <div id="modStatusBar" class="fixed top-0 left-0 right-0 bg-gradient-to-r from-teal-500 to-purple-500 text-white py-2 px-4 text-center z-50">
        <div id="autoModeStatus" class="inline-block">
            <i class="fas fa-microphone-alt mr-2 animate-pulse"></i> 
            <b>Otomatik Mod:</b> Sesiniz algılandığında kayıt başlar ve sessizlikte otomatik durur
        </div>
        <div id="manualModeStatus" class="hidden inline-block">
            <i class="fas fa-hand mr-2"></i> 
            <b>Manuel Mod:</b> <span class="px-2 py-1 bg-white bg-opacity-20 rounded">Space</span> tuşuna basılı tutarak konuşun
        </div>
    </div>

    <!-- Butonları yeniden düzenle -->
    <div class="mode-buttons-container hidden" id="modeButtonsContainer">
        <button class="mode-toggle-button" id="toggleModeButton">
            <i class="fas fa-microphone-alt"></i>
        <span>Otomatik Mod</span>
    </button>

        <button class="end-button" id="endInterviewButton">
        <i class="fas fa-stop"></i>
        <span>Mülakatı Bitir</span>
    </button>
    </div>

    <button class="start-button" id="startButton">
        <i class="fas fa-play"></i>
        <span>Mülakata Başla</span>
    </button>

    <!-- Eski mod info bileşeni gizlendi, yukarıya taşındı -->
    <div id="modeInfo" class="mode-info hidden">
        <div id="autoModeInfo" class="hidden">
            <p><i class="fas fa-info-circle"></i> Otomatik Mod: Sesiniz algılandığında kayıt başlar ve sessizlikte otomatik durur.</p>
        </div>
        <div id="manualModeInfo" class="hidden">
            <p><i class="fas fa-info-circle"></i> Manuel Mod: <span class="keyboard-key">Space</span> tuşuna basılı tutarak konuşun.</p>
        </div>
    </div>

    <script>
        // Mevcut değişkenler ve fonksiyonları korumak için aynı tanımları tutuyoruz
        let mediaRecorder = null;
        let audioChunks = [];
        let isRecording = false;
        let audioContext = null;
        let analyser = null;
        let silenceStart = null;
        let silenceTimeout = null;
        let isAutoMode = true;
        let isGPTSpeaking = false;
        let audioStream = null;
        let isAudioInitialized = false;
        let isMediaRecorderReady = false;
        let startTime = null;
        let interviewEnded = false;
        let interviewCode = new URLSearchParams(window.location.search).get('code');
        let realtimeSession = null;
        let interviewStartTime = null;
        let timerInterval = null;
        let chatHistory = [];
        let videoStream = null;
        let cameraActive = false;
        let photoInterval = null;
        let lastPhotoTime = 0;
        let photoCounter = 0;

        // WebSocket yerine SSE kullanımı
        async function initializeRealtimeSession() {
            try {
                console.log("Realtime oturum başlatılıyor...");
                
                // Token al
                const response = await fetch('/get_interview_token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code: interviewCode
                    })
                });

                const data = await response.json();
                if (!data.success) {
                    console.warn("Realtime token alınamadı:", data.error || "Bilinmeyen hata");
                    return false;
                }

                console.log("Realtime token alındı");
                
                // Token ve session ID'yi sakla
                localStorage.setItem('interview_token', data.token);
                localStorage.setItem('interview_session_id', data.session_id);

                // WebSocket desteği varsa ve URL verilmişse bağlantıyı kur
                if ('WebSocket' in window && data.websocket_url) {
                    try {
                        realtimeSession = new WebSocket(data.websocket_url);
                        
                        realtimeSession.onopen = function() {
                            console.log("WebSocket bağlantısı açıldı");
                        };
                        
                        realtimeSession.onclose = function(event) {
                            console.log("WebSocket bağlantısı kapandı", event.code, event.reason);
                        };
                        
                        realtimeSession.onerror = function(error) {
                            console.error("WebSocket hatası:", error);
                        };
                        
                        return true;
                    } catch (error) {
                        console.error("WebSocket bağlantı hatası:", error);
                        return false;
                    }
                } else {
                    console.warn("WebSocket desteklenmiyor veya websocket_url sağlanmadı");
                    return false;
                }
            } catch (error) {
                console.error("Realtime oturum başlatma hatası:", error);
                return false;
            }
        }

        async function sendAudioToRealtime(audioBlob) {
            if (!realtimeSession || realtimeSession.readyState !== WebSocket.OPEN) {
                console.log("Realtime bağlantısı aktif değil, alternatif yöntem kullanılıyor");
                // WebSocket bağlantısı yoksa veya açık değilse normal HTTP isteği kullan
                return await sendAudioToServer(audioBlob);
            }

            try {
                // Ses verisini base64'e çevir
                const reader = new FileReader();
                
                return new Promise((resolve, reject) => {
                    reader.onloadend = function() {
                        try {
                            const base64Audio = reader.result.split(',')[1];
                            
                            // WebSocket üzerinden gönder
                            realtimeSession.send(JSON.stringify({
                                type: 'audio',
                                data: base64Audio
                            }));
                            
                            console.log("Ses WebSocket üzerinden gönderildi");
                            resolve(true);
                        } catch (error) {
                            console.error("Base64 dönüşüm hatası:", error);
                            reject(error);
                        }
                    };
                    
                    reader.onerror = function(error) {
                        console.error("FileReader hatası:", error);
                        reject(error);
                    };
                    
                    reader.readAsDataURL(audioBlob);
                });
            } catch (error) {
                console.error("WebSocket ses gönderme hatası:", error);
                // Hata olursa normal HTTP isteğine geri dön
                return await sendAudioToServer(audioBlob);
            }
        }

        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', async function() {
            console.log("DOMContentLoaded olayı başladı");
            
            // Tüm fonksiyonların tanımlı olup olmadığını kontrol et
            const requiredFunctions = [
                'startRecording', 'stopRecording', 'processAudio',
                'updateAvatarState', 'showError', 'enableManualMode',
                'enableAutoMode', 'initAudio', 'startVoiceDetection'
            ];
            
            const missingFunctions = requiredFunctions.filter(fn => typeof window[fn] !== 'function');
            if (missingFunctions.length > 0) {
                console.error("Tanımlı olmayan fonksiyonlar:", missingFunctions);
            } else {
                console.log("Tüm gerekli fonksiyonlar tanımlı");
            }
            
            // Web Speech API desteğini kontrol et
            if ('SpeechSynthesisUtterance' in window && 'speechSynthesis' in window) {
                console.log("Web Speech API destekleniyor");
                
                // Kullanılabilir sesleri listele
                const voices = window.speechSynthesis.getVoices();
                console.log(`${voices.length} ses bulundu`);
            } else {
                console.warn("Web Speech API desteklenmiyor");
                showError("Tarayıcınız ses sentezi özelliğini desteklemiyor. Chrome kullanmanızı öneririz.");
            }
            
            // Modal'ı göster
            if (typeof showModal === 'function') {
                showModal();
            } else {
                // showModal fonksiyonu yoksa, direkt DOM manipülasyonu ile göster
                const infoModal = document.getElementById('infoModal');
                if (infoModal) {
                    infoModal.style.display = 'flex';
                }
            }
            
            // Buton dinleyicilerini ayarla
            console.log("Buton dinleyicileri ayarlanıyor...");
            
            // Manuel mod butonu
            const manualModeButton = document.getElementById('manualModeButton');
            if (manualModeButton) {
                manualModeButton.addEventListener('click', function() {
                    if (!interviewEnded) {
                        enableManualMode();
                    }
                });
            }

            // Otomatik mod butonu
            const autoModeButton = document.getElementById('autoModeButton');
            if (autoModeButton) {
                autoModeButton.addEventListener('click', function() {
                    if (!interviewEnded) {
                        enableAutoMode();
                    }
                });
            }
            
            // Kayıt göstergesi ortada dairesel animasyon için div ekle
            const recordIndicator = document.createElement('div');
            recordIndicator.className = 'record-indicator';
            recordIndicator.innerHTML = '<div class="smile-animation">😊</div>';
            document.body.appendChild(recordIndicator);
            
            // Space tuşu olaylarını ekle
            document.addEventListener('keydown', function(event) {
                // Space tuşu kontrolü ve manuel mod kontrolü
                if (event.code === 'Space' && !isAutoMode && !interviewEnded) {
                    event.preventDefault(); // Sayfanın kaymasını engelle
                    
                    // GPT konuşuyorsa kayıt yapmayı engelle
                    if (isGPTSpeaking) {
                        showError('Lütfen GPT konuşmasının bitmesini bekleyin');
                        return;
                    }
                    
                    // Zaten kayıt yapılıyorsa, tekrar başlatma
                    if (isRecording) {
                        console.log("Zaten kayıt yapılıyor, tekrar başlatma işlemi atlandı");
                        return;
                    }
                    
                    console.log("Space tuşuna basıldı - Manuel kayıt başlatılıyor");
                    
                    // Önceki kaydı temizle ve yeni kayıt başlat
                    console.log("Önceki kayıt durumu sıfırlanıyor...");
                    resetRecordingState();
                    
                    // Kayıt durumunu güncelle ve görsel geri bildirim göster
                    document.getElementById('statusText').textContent = "Ses Kaydediliyor...";
                    document.getElementById('statusDot').style.backgroundColor = '#ef4444'; // Kırmızı
                    document.getElementById('manualModeButton').classList.add('recording-active');
                    document.body.classList.add('recording-active');
                    
                    // Ortadaki daire göstergesini güncelle
                    updateRecordingVisuals(true);
                    
                    // MediaRecorder yeni sürümü ile başlat - küçük bir gecikme ile (50ms)
                    setTimeout(function() {
                        try {
                            if (!isRecording) return; // Bu sürede iptal edilmişse çıkış yap
                            
                            startRecording();
                            updateAvatarState('listening');
                        } catch (err) {
                            console.error("Kayıt başlatma hatası:", err);
                            resetRecordingState();
                            showError("Kayıt başlatılamadı");
                        }
                    }, 50);
                }
            });

            document.addEventListener('keyup', function(event) {
                if (event.code === 'Space' && !isAutoMode && !interviewEnded) {
                    event.preventDefault(); // Sayfanın kaymasını engelle
                    
                    // Kayıt yapılmıyorsa, durdurma işlemini atla
                    if (!isRecording) {
                        console.log("Aktif kayıt yok, durdurma işlemi atlandı");
                        return;
                    }
                    
                    console.log("Space tuşu bırakıldı - Manuel kayıt durduruluyor");
                    
                    // Durumu güncelle ve görsel geri bildirimi kapat
                    document.getElementById('statusText').textContent = "Ses İşleniyor...";
                    document.getElementById('statusDot').style.backgroundColor = '#6b7280'; // Gri
                    document.getElementById('manualModeButton').classList.remove('recording-active');
                    document.body.classList.remove('recording-active');
                    
                    // Ortadaki daire göstergesini gizle
                    updateRecordingVisuals(false);
                    
                    // Kaydı durdur ve işle
                    try {
                        stopRecording();
                    } catch (err) {
                        console.error("Kayıt durdurma hatası:", err);
                        resetRecordingState(); // Hata durumunda temizlik yap
                        showError("Kayıt durdurulamadı");
                    }
                }
            });
            
            console.log("Buton dinleyicileri ayarlandı");
            
            // Mülakat kodunu URL'den al
            interviewCode = new URLSearchParams(window.location.search).get('code');
            if (!interviewCode) {
                console.error("Mülakat kodu URL'de bulunamadı!");
                showError("Geçersiz mülakat kodu");
                return;
            }
            
            // Realtime oturumu başlat
            await initializeRealtimeSession();
            
            console.log("Mülakat başlatmaya hazır");
        });
        
        // Mod değiştirme fonksiyonu (Otomatik <-> Manuel arası geçiş)
        function toggleMode() {
            if (isGPTSpeaking) {
                showError('GPT konuşurken mod değiştirilemez');
                return;
            }
            
            // Ses kaydını sonlandır önce
            if (isRecording) {
                stopRecording();
            }
            
            // Modu değiştir ve durumu kaydet
            isAutoMode = !isAutoMode;
            
            // Mod değişimini konsola logla
            console.log('Mod değiştirildi:', isAutoMode ? 'Otomatik Mod' : 'Manuel Mod (Space tuşu ile kaydet)');
            
            // Mod durumu barını güncelle
            updateModeStatus();
            
            // Buton rengini ve içeriğini güncelle
            updateModeButton();
            
            // API modlarını güncelle
            if (isAutoMode) {
                enableAutoMode();
            } else {
                enableManualMode();
            }
        }
        
        // Mod durumu bilgisini güncelle
        function updateModeStatus() {
            const autoStatus = document.getElementById('autoModeStatus');
            const manualStatus = document.getElementById('manualModeStatus');
            
            if (autoStatus && manualStatus) {
                if (isAutoMode) {
                    autoStatus.classList.remove('hidden');
                    manualStatus.classList.add('hidden');
                    document.body.classList.remove('manual-mode');
                } else {
                    autoStatus.classList.add('hidden');
                    manualStatus.classList.remove('hidden');
                    document.body.classList.add('manual-mode');
                }
            }
        }
        
        // Mod değiştirme butonunu güncelle
        function updateModeButton() {
            const toggleButton = getElement('toggleModeButton');
            
            if (toggleButton) {
                if (isAutoMode) {
                    toggleButton.innerHTML = '<i class="fas fa-microphone-alt"></i><span>Otomatik Mod</span>';
                    toggleButton.classList.remove('manual');
                } else {
                    toggleButton.innerHTML = '<i class="fas fa-hand"></i><span>Manuel Mod</span>';
                    toggleButton.classList.add('manual');
                }
            }
            
            // Eski butonları da güncelle
            updateLegacyButtons();
        }
        
        // Eski butonları güncelle
        function updateLegacyButtons() {
            const autoBtn = getElement('autoModeButton');
            const manualBtn = getElement('manualModeButton');
            
            if (autoBtn) autoBtn.classList.toggle('active', isAutoMode);
            if (manualBtn) manualBtn.classList.toggle('active', !isAutoMode);
        }
        
        // Otomatik modu etkinleştir
        function enableAutoMode() {
            if (isGPTSpeaking) {
                showError('GPT konuşurken mod değiştirilemez');
                return;
            }
            
            // Önceki kayıt durumunu temizle
            resetRecordingState();
            
            isAutoMode = true;
            console.log('Otomatik mod etkinleştirildi');
            
            // Buton görünümlerini güncelle
            const manualModeButton = document.getElementById('manualModeButton');
            const autoModeButton = document.getElementById('autoModeButton');
            
            manualModeButton.classList.remove('active');
            autoModeButton.classList.add('active');
            
            // Mod bilgilerini güncelle
            document.getElementById('modeInfo').classList.remove('hidden');
            document.getElementById('manualModeInfo').classList.add('hidden');
            document.getElementById('autoModeInfo').classList.remove('hidden');
            
            updateStatus('Ses seviyeniz algılandığında kayıt başlar', 'auto');
            updateAvatarState('listening');
            
            // Ses algılamayı başlat
            if (isAudioInitialized) {
                startVoiceDetection();
            } else {
                initAudio().then((initialized) => {
                    if (initialized) {
                        startVoiceDetection();
                    }
                });
            }
        }
        
        // Manuel modu etkinleştir
        function enableManualMode() {
            if (isGPTSpeaking) {
                showError('GPT konuşurken mod değiştirilemez');
                return;
            }
            
            // Önceki kayıt durumunu tamamen temizle
            resetRecordingState();
            
            isAutoMode = false;
            console.log('Manuel mod etkinleştirildi');
            
            // Buton görünümlerini güncelle
            const manualModeButton = document.getElementById('manualModeButton');
            const autoModeButton = document.getElementById('autoModeButton');
            
            autoModeButton.classList.remove('active');
            manualModeButton.classList.add('active');
            
            // Mod bilgilerini güncelle
            document.getElementById('modeInfo').classList.remove('hidden');
            document.getElementById('manualModeInfo').classList.remove('hidden');
            document.getElementById('autoModeInfo').classList.add('hidden');
            
            updateStatus('Space tuşuna basılı tutarak konuşun', 'manual');
            updateAvatarState('idle');
            
            // Manuel modda otomatik kayıt durduruluyor
            if (isRecording) {
                stopRecording();
            }
        }
        
        // Mülakat başlatma fonksiyonu
        async function startInterview() {
            try {
                console.log("startInterview fonksiyonu başlatıldı");
                
                // Mülakata başla butonu yerine mod butonlarını göster
                const startButton = getElement('startButton', ['modeButton']);
                const modeButtonsContainer = getElement('modeButtonsContainer');
                
                if (startButton && modeButtonsContainer) {
                    startButton.style.display = 'none';
                    modeButtonsContainer.classList.remove('hidden');
                } else {
                    console.error("startButton veya modeButtonsContainer bulunamadı");
                    showError('Arayüz öğesi eksik');
                    return;
                }
                
                // Mod durum barını göster - En üstte
                const modStatusBar = document.getElementById('modStatusBar');
                if (modStatusBar) {
                    modStatusBar.style.display = 'block';
                    
                    // Header pozisyonunu ayarla
                    const header = document.querySelector('.header');
                    if (header) {
                        header.style.top = '36px'; // Mod bilgi çubuğunun altı
                    }
                }
                
                // Kamera konteynerini sağ üste taşı 
                const cameraContainer = document.getElementById('cameraContainer');
                if (cameraContainer) {
                    cameraContainer.style.top = '150px'; // Daha aşağıda
                    cameraContainer.style.right = '35px'; // Daha sağda
                    cameraContainer.style.width = '160px';
                    cameraContainer.style.height = '120px';
                }
                
                // Mod bilgisi göstergesini ayarla
                const modeInfo = getElement('modeInfo');
                const autoModeInfo = getElement('autoModeInfo');
                
                if (modeInfo) modeInfo.classList.remove('hidden');
                if (autoModeInfo) autoModeInfo.classList.remove('hidden');
                
                // Varsayılan olarak otomatik modu etkinleştir
                const toggleBtn = getElement('toggleModeButton');
                if (toggleBtn) {
                    toggleBtn.innerHTML = '<i class="fas fa-microphone-alt"></i><span>Otomatik Mod</span>';
                    toggleBtn.classList.remove('manual');
                }
                isAutoMode = true;
                
                // Kayıt izni iste
                console.log("Mikrofon erişimi isteniyor...");
                
                try {
                    // Mikrofon erişimini başlat
                    const initialized = await initAudio();
                    if (!initialized) {
                        showError('Mikrofon erişimi sağlanamadı');
                        return;
                    }
                    
                    // Mülakat başlatma API'sini çağır
                    const response = await fetch('/start_interview', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            code: interviewCode
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Mülakat başarıyla başlatıldı
                        console.log("Mülakat başarıyla başlatıldı:", data);
                        createChatBubble('assistant', data.welcome_message);
                        
                        // Otomatik modu başlat
                        updateStatus('Ses seviyeniz algılandığında kayıt başlar', 'auto');
                        updateAvatarState('listening');
                        
                        // Ses algılamayı başlat
                        startVoiceDetection();
                        
                        // Mülakat zamanını başlat
                        if (typeof startInterviewTimer === 'function') {
                            startInterviewTimer();
                        } else {
                            // Fallback: Timer yönetimi
                            interviewStartTime = new Date();
                            updateTimer();
                            timerInterval = setInterval(updateTimer, 1000);
                        }
                    } else {
                        showError(data.error || 'Mülakat başlatılamadı');
                    }
                } catch (error) {
                    console.error('Mikrofon hatası:', error);
                    showError('Mikrofon erişim izni verilmedi');
                }
            } catch (error) {
                console.error('Mülakat başlatma hatası:', error);
                showError('Mülakat başlatılamadı');
            }
        }

        // Ses kaydını işleme fonksiyonunu güncelle
        async function processAudio(audioBlob) {
            try {
                console.log('Ses kaydı işleniyor, boyut:', audioBlob.size, 'bytes');
                
                // Önceki kullanıcı mesajını temizle
                const existingUserMessages = document.querySelectorAll('.chat-bubble.user-bubble');
                existingUserMessages.forEach(msg => {
                    msg.classList.add('fade-out');
                    setTimeout(() => msg.remove(), 300);
                });

                // İşleme durumunu güncelle
                updateStatus('Ses işleniyor...', 'processing');
                updateAvatarState('processing');
                
                try {
                    // Önce realtime üzerinden göndermeyi dene
                await sendAudioToRealtime(audioBlob);
                } catch (error) {
                    console.error('Realtime bağlantısı başarısız:', error);
                    // Başarısız olursa HTTP isteği ile gönder
                    await sendAudioToServer(audioBlob);
                }
            } catch (error) {
                console.error('Ses işleme hatası:', error);
                updateStatus('Bir hata oluştu', 'error');
                updateAvatarState('idle');
            }
        }

        // Ses seviyesi eşikleri
        const SILENCE_THRESHOLD = 0.005;  // Sessizlik eşiği (daha da düşük)
        const VOICE_THRESHOLD = 0.03;    // Konuşma başlangıç eşiği (daha düşük)
        const SILENCE_DURATION = 800;    // Sessizlik süresi (ms) - daha kısa süre
        const MIN_CONFIDENCE = 0.6;      // Minimum güven skoru

        async function initAudio() {
            try {
                if (isAudioInitialized) {
                    console.log('Ses sistemi zaten başlatılmış durumda');
                    return true;
                }
                
                console.log('Ses kayıt sistemi başlatılıyor...');
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        autoGainControl: true
                    } 
                });
                
                // Başarılı cihaz bilgilerini log'a yazdır
                const audioTracks = stream.getAudioTracks();
                if (audioTracks.length > 0) {
                    const settings = audioTracks[0].getSettings();
                    console.log('Mikrofon özellikleri:', settings);
                    console.log('Mikrofon etiketi:', audioTracks[0].label);
                }
                
                audioStream = stream;
                
                // AudioContext'i başlat
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                audioContext = new AudioContext();
                
                // Ses işleme sistemini kur
                const source = audioContext.createMediaStreamSource(stream);
                analyser = audioContext.createAnalyser();
                analyser.fftSize = 1024;
                analyser.smoothingTimeConstant = 0.3;
                source.connect(analyser);
                
                // MediaRecorder'ı ayarla
                mediaRecorder = new MediaRecorder(stream, { 
                    mimeType: 'audio/webm;codecs=opus',
                    audioBitsPerSecond: 128000 
                });
                
                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };
                
                mediaRecorder.onstop = async function() {
                    console.log('MediaRecorder durduruldu, toplam chunk sayısı:', audioChunks.length);
                    
                    if (audioChunks.length === 0) {
                        console.warn('Ses verisi bulunamadı!');
                        updateStatus('Ses kaydedilemedi', 'error');
                        return;
                    }
                    
                        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    console.log('Ses kaydı tamamlandı, boyut:', audioBlob.size, 'bytes');
                    
                    // Boyutu logla
                    if (audioBlob.size < 1000) {
                        console.warn('Ses kaydı çok küçük, mikrofon çalışmıyor olabilir!');
                    }
                    
                    if (!interviewEnded) {
                        await processAudio(audioBlob);
                    }
                };
                
                // Ses seviyesi kontrolünü başlat
                requestAnimationFrame(checkAudioLevel);
                
                isMediaRecorderReady = true;
                isAudioInitialized = true;
                console.log('Ses sistemi başarıyla kuruldu');
                
                return true;
            } catch (error) {
                console.error('Ses sistemi başlatma hatası:', error);
                if (error.name === 'NotAllowedError') {
                    showError('Mikrofon izni verilmedi. Lütfen izin verin.');
                } else if (error.name === 'NotFoundError') {
                    showError('Mikrofon cihazı bulunamadı. Lütfen mikrofon bağlantınızı kontrol edin.');
                } else {
                    showError('Ses sistemi başlatılamadı: ' + error.message);
                }
                return false;
            }
        }

        async function stopAudioSystem() {
            try {
                if (mediaRecorder && mediaRecorder.state === 'recording') {
                    mediaRecorder.stop();
                }
                
                if (audioContext) {
                    await audioContext.suspend();
                }
                
                if (audioStream) {
                    audioStream.getTracks().forEach(track => track.stop());
                }
                
                isAudioInitialized = false;
            } catch (error) {
                console.error('Ses sistemi durdurma hatası:', error);
            }
        }

        function startVoiceDetection() {
            if (!analyser || !isAutoMode || interviewEnded) {
                console.log('Ses algılama başlatılamıyor:', {
                    analyserExists: !!analyser,
                    isAutoMode,
                    interviewEnded
                });
                return;
            }

            if (isGPTSpeaking) {
                console.log('GPT konuşuyor, ses algılama erteleniyor');
                return;
            }
            
            console.log('Ses algılama başlatılıyor...');
            // Ses algılama başlattığımızı kullanıcıya bildir
            updateStatus('Dinleniyor...', 'listening');
            updateAvatarState('listening');
            
            // Otomatik modda iken ses seviyesi kontrolü zaten yapılıyor
            if (isAudioInitialized && mediaRecorder && mediaRecorder.state === 'inactive') {
                console.log('Ses seviyesi kontrolü ve kayıt sistemi hazır');
                    startRecording();
                } else {
                console.warn('MediaRecorder hazır değil veya zaten kayıtta');
            }
        }

        function updateVolumeIndicator(volume) {
            const volumeWaves = document.querySelector('.volume-waves');
            if (volumeWaves) {
                volumeWaves.style.opacity = volume;
            }
            
            const statusDot = document.getElementById('statusDot');
            if (statusDot) {
            if (volume > VOICE_THRESHOLD) {
                statusDot.style.backgroundColor = '#ef4444'; // Kırmızı
            } else if (volume > SILENCE_THRESHOLD) {
                statusDot.style.backgroundColor = '#22c55e'; // Yeşil
            } else {
                statusDot.style.backgroundColor = '#6b7280'; // Gri
                }
            }
        }

        function toggleRecording() {
            if (!mediaRecorder) {
                initAudio().then((initialized) => {
                    if (initialized) {
                        isAutoMode = true;
                        startVoiceDetection();
                        updateStatus('Otomatik mod aktif', 'auto');
                    }
                });
                return;
            }

            if (isRecording) {
                stopRecording();
            } else {
                isAutoMode = true;
                startVoiceDetection();
                updateStatus('Otomatik mod aktif', 'auto');
            }
        }

        // Yeni bir MediaRecorder oluşturan ve kayıt başlatan fonksiyon
        function _startRecordingInternal() {
            try {
                // Ses parçalarını tutacak array'i temizle
                audioChunks = [];
                
                // MediaRecorder başlatılıyor
                console.log("MediaRecorder hazır, kayıt başlatılıyor");
                
                // MediaRecorder oluştur
                mediaRecorder = new MediaRecorder(audioStream, {
                    mimeType: 'audio/webm;codecs=opus',
                    audioBitsPerSecond: 128000
                });
                
                // Ses verisi geldiğinde
                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                        console.log(`Ses chunk alındı, boyut: ${event.data.size} bytes`);
                    }
                };
                
                // Kayıt durduğunda
                mediaRecorder.onstop = function() {
                    console.log(`MediaRecorder durduruldu, toplam chunk sayısı: ${audioChunks.length}`);
                    
                    if (audioChunks.length === 0) {
                        console.warn("Ses verisi bulunamadı!");
                        return;
                    }
                    
                    var audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    console.log(`Ses kaydı tamamlandı, boyut: ${audioBlob.size} bytes`);
                    
                    // Ses kaydını işle
                    processAudio(audioBlob);
                };
                
                // Kayıt başlat - Her 100ms'de bir veri al
                mediaRecorder.start(100);
                console.log("Kayıt başlatıldı");
                isRecording = true;
                
                // İstenilen mod'a göre UI'ı güncelle
                if (isAutoMode) {
                    document.getElementById('statusText').textContent = "Ses Algılandı (Otomatik Kayıt)";
                } else {
                    document.getElementById('statusText').textContent = "Kaydediliyor... (Space tuşunu bırakınca kayıt durur)";
                }
                
            } catch (error) {
                console.error("MediaRecorder hatası:", error);
                resetRecordingState();
                showError("Ses kaydı başlatılamadı: " + error.message);
            }
        }

        // startRecording fonksiyonunu güncelle
        function startRecording() {
            if (isRecording) {
                console.log("Zaten kayıt yapılıyor, işlem atlandı");
                return;
            }
            
            if (!audioStream) {
                console.error("Ses akışı (audioStream) bulunamadı!");
                showError("Mikrofon bağlantısı kurulamadı");
                return;
            }
            
            // Avatar durumunu güncelle
            updateAvatarState('listening');
            
            // Kayıt durumunu true olarak işaretle ve kayıt başlat
            isRecording = true;
            _startRecordingInternal();
            
            // Görsel geribildirim
            document.body.classList.add('recording-active');
            if (!isAutoMode) {
                document.getElementById('statusDot').style.backgroundColor = '#ef4444'; // Kırmızı
            }
        }

        // stopRecording fonksiyonunu güncelle
        function stopRecording() {
            // Eğer kaydedilmiyor veya MediaRecorder hazır değilse çık
            if (!isRecording || !mediaRecorder) {
                return;
            }
            
            // MediaRecorder durumunu kontrol et
            console.log("Kayıt durdurma isteği - Durum kontrolü:", {
                isRecording: isRecording,
                mediaRecorderState: mediaRecorder ? mediaRecorder.state : 'unavailable'
            });
            
            try {
                // Eğer kayıt aktifse, durdur
                if (mediaRecorder && mediaRecorder.state === 'recording') {
                    console.log("MediaRecorder aktif - durdurma çağrılıyor");
                    mediaRecorder.stop();
                    console.log("Kayıt durduruldu");
                } else {
                    console.log("MediaRecorder aktif değil - durum sıfırlanıyor");
                }
            } catch (error) {
                console.error("Kayıt durdurma hatası:", error);
            } finally {
                // Kayıt durumunu false olarak işaretle 
                isRecording = false;
                
                // UI güncelle
                document.body.classList.remove('recording-active');
                updateAvatarState('processing');
            }
        }

        // Kayıt durumunu tamamen sıfırla
        function resetRecordingState() {
            console.log("Kayıt durumu sıfırlandı");
            
            // Durum değişkenlerini sıfırla
            isRecording = false;
            audioChunks = [];
            
            // MediaRecorder'ı durdur
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                try {
                    mediaRecorder.stop();
                } catch (e) {
                    console.warn("MediaRecorder durdurma hatası:", e);
                }
            }
            
            // Ses algılama zamanlayıcısını temizle
            if (silenceTimeout) {
                clearTimeout(silenceTimeout);
                silenceTimeout = null;
            }
            
            // UI'ı sıfırla
            document.body.classList.remove('recording-active');
        }

        // Gülen yüz emojisi içeren dairenin görünümünü güncelle
        function updateRecordingVisuals(isActive) {
            const recordIndicator = document.querySelector('.record-indicator');
            if (!recordIndicator) return;
            
            if (isActive) {
                recordIndicator.style.display = 'flex';
                recordIndicator.innerHTML = '<div style="font-size: 40px;">😊</div>';
            } else {
                recordIndicator.style.display = 'none';
            }
        }

        function updateRecordingUI(isRecording) {
            const statusDot = document.getElementById('statusDot');
            const statusText = document.getElementById('statusText');
            const avatar = document.getElementById('duftechAvatar');
            
            if (isRecording) {
                statusDot.classList.add('listening');
                statusText.textContent = 'Kaydediliyor...';
                avatar.classList.add('speaking');
            } else {
                statusDot.classList.remove('listening');
                statusText.textContent = isAutoMode ? 'Dinleniyor...' : 'Dinlemeye hazır';
                avatar.classList.remove('speaking');
            }
        }

        function updateStatus(text, mode) {
            const statusText = document.getElementById('statusText');
            const statusDot = document.getElementById('statusDot');
            
            if (!statusText || !statusDot) {
                console.error('Durum gösterge öğeleri bulunamadı');
                return;
            }
            
            statusText.textContent = text;
            
            // Önceki tüm durumları temizle
            statusDot.classList.remove('status-listening', 'status-speaking', 'status-idle', 'status-processing', 'status-completed', 'status-error');
            
            // Yeni durumu ekle
            statusDot.classList.add(`status-${mode}`);
        }

        async function speakResponse(text) {
            try {
                // Ses dosyası için benzersiz isim oluştur
                const timestamp = new Date().getTime();
                const random = Math.floor(Math.random() * 1000000);
                
                // OpenAI TTS isteği gönder
                const response = await fetch('/get_speech?text=' + encodeURIComponent(text), {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error('TTS isteği başarısız oldu');
                }

                // Ses verisini al ve oynat
                const audioBlob = await response.blob();
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);

                return new Promise((resolve) => {
                    audio.onplay = () => {
                        console.log('GPT konuşmaya başladı');
                        isSpeaking = true;
                        isGPTSpeaking = true;
                        updateStatus('GPT yanıt veriyor...', 'speaking');
                        updateAvatarState('speaking');
                    };

                    audio.onended = async () => {
                        console.log('GPT konuşması bitti');
                        URL.revokeObjectURL(audioUrl);
                        isSpeaking = false;
                        isGPTSpeaking = false;

                        // Mikrofon sistemini sıfırla ve kontrole başla
                        try {
                            if (!isAudioInitialized) {
                                console.log('Mikrofon sistemi yeniden başlatılıyor...');
                                await initAudio();
                            }

                        if (isAutoMode) {
                                console.log('GPT konuşması bitti - Otomatik ses algılama yeniden başlatılıyor');
                            updateStatus('Sesinizi bekliyorum...', 'auto');
                            updateAvatarState('listening');
                                
                                // Yeniden ses kaydına başla
                                silenceStart = null; // Sessizlik sayacını sıfırla
                                if (silenceTimeout) {
                                    clearTimeout(silenceTimeout);
                                    silenceTimeout = null;
                                }
                                
                                if (!isRecording && mediaRecorder && mediaRecorder.state === 'inactive') {
                                    console.log('Asistan konuşması bitti - Otomatik kayıt yeniden başlatılıyor');
                                    startRecording();
                                }
                        } else {
                                console.log('GPT konuşması bitti - Manuel mod hazır');
                            updateStatus('Space tuşuna basılı tutarak konuşun', 'manual');
                            updateAvatarState('idle');
                            }
                        } catch (error) {
                            console.error('GPT konuşması sonrası yeniden başlatma hatası:', error);
                        }

                        resolve();
                    };

                    audio.onerror = (error) => {
                        console.error('Ses oynatma hatası:', error);
                        URL.revokeObjectURL(audioUrl);
                        isSpeaking = false;
                        isGPTSpeaking = false;
                        updateStatus('Ses oynatma hatası', 'error');
                        updateAvatarState('idle');
                        resolve();
                    };

                    audio.play().catch((error) => {
                        console.error('Ses oynatma başlatma hatası:', error);
                        URL.revokeObjectURL(audioUrl);
                        resolve();
                    });
                });
            } catch (error) {
                console.error('TTS hatası:', error);
                isSpeaking = false;
                isGPTSpeaking = false;
                updateStatus('Ses oluşturma hatası', 'error');
                updateAvatarState('idle');
            }
        }

        async function initializeInterview() {
            try {
                console.log("initializeInterview başlatıldı");
                // Mülakat kodunu al
                const interviewCode = new URLSearchParams(window.location.search).get('code');
                if (!interviewCode) {
                    showError('Mülakat kodu bulunamadı');
                    return false;
                }
                
                // Avatar bileşenini göster
                const avatar = document.getElementById('duftechAvatar');
                if (avatar) {
                    avatar.style.display = 'flex';
                } else {
                    console.warn("duftechAvatar bulunamadı");
                }
                
                // Mod butonlarını göster
                const modeButton = document.getElementById('modeButton');
                const manualModeButton = document.getElementById('manualModeButton');
                const autoModeButton = document.getElementById('autoModeButton');
                const endInterviewButton = document.getElementById('endInterviewButton');
                
                if (modeButton) {
                    modeButton.style.display = 'flex';
                    modeButton.classList.remove('hidden');
                } else {
                    console.warn("modeButton bulunamadı");
                }
                
                if (manualModeButton) {
                    manualModeButton.style.display = 'none';
                } else {
                    console.warn("manualModeButton bulunamadı");
                }
                
                if (autoModeButton) {
                    autoModeButton.style.display = 'none';
                } else {
                    console.warn("autoModeButton bulunamadı");
                }
                
                if (endInterviewButton) {
                    endInterviewButton.style.display = 'flex';
                } else {
                    console.warn("endInterviewButton bulunamadı");
                }
                
                // Giriş formunu gizle (eğer varsa)
                const startContainer = document.getElementById('startContainer');
                if (startContainer) {
                    startContainer.style.display = 'none';
                } else {
                    console.warn("startContainer bulunamadı");
                }
                
                // Chat containerı göster (eğer varsa)
                const chatContainer = document.getElementById('chatContainer');
                if (chatContainer) {
                    chatContainer.style.display = 'block';
                } else {
                    console.warn("chatContainer bulunamadı");
                }
                
                // Realtime session başlat
                await initializeRealtimeSession();
                
                // Mülakatı başlat
                window.interviewStarted = true;
                isAutoMode = false; // Manuel modda başlat
                
                console.log("initializeInterview başarıyla tamamlandı");
                return true;
            } catch (error) {
                console.error('Mülakat başlatma hatası:', error);
                showError('Mülakat başlatma hatası: ' + error.message);
                return false;
            }
        }

        async function sendAudioToServer(audioBlob) {
            try {
                if (isGPTSpeaking) {
                    console.log('GPT konuşuyor, ses kaydı işlenmeyecek');
                    return;
                }

                if (audioBlob.size === 0) {
                    console.log('Boş ses kaydı, işlem yapılmayacak');
                    return;
                }

                // İşlem aşamalarını göster
                showProcessingSteps();
                updateProcessingStep('transcribe', 'active');
                updateAvatarState('processing');

                const formData = new FormData();
                formData.append('audio', audioBlob, 'audio.webm');
                formData.append('code', interviewCode);

                const response = await fetch('/process_audio', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    hideProcessingSteps();
                    const errorText = await response.text();
                    console.error('Sunucu yanıt detayı:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}, detail: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Sunucu yanıtı:', data);
                
                if (data.success) {
                    // Ses tanıma tamamlandı
                    updateProcessingStep('transcribe', 'completed');
                    updateProcessingStep('evaluate', 'active');

                    if (data.transcript) {
                        // Önceki kullanıcı mesajlarını temizle
                        const existingUserMessages = document.querySelectorAll('.chat-bubble.user-bubble');
                        existingUserMessages.forEach(msg => {
                            msg.classList.add('fade-out');
                            setTimeout(() => msg.remove(), 300);
                        });
                        
                        // Yeni kullanıcı mesajını ekle
                        addMessageToChat('user', data.transcript);
                    }

                    // Değerlendirme tamamlandı
                    updateProcessingStep('evaluate', 'completed');
                    updateProcessingStep('respond', 'active');
                    updateAvatarState('speaking');

                    if (data.response) {
                        // GPT konuşmaya başlamadan önce ses algılamayı durdur
                        isGPTSpeaking = true;
                        stopVoiceDetection();
                        
                        // Yanıt hazır
                        updateProcessingStep('respond', 'completed');
                        setTimeout(() => {
                            hideProcessingSteps();
                        }, 1000);

                        // Önceki asistan mesajlarını temizle
                        const existingAssistantMessages = document.querySelectorAll('.chat-bubble.assistant-bubble');
                        existingAssistantMessages.forEach(msg => {
                            msg.classList.add('fade-out');
                            setTimeout(() => msg.remove(), 300);
                        });

                        // Önce sesi oynat, sonra mesajı göster
                        await speakResponse(data.response);
                        addMessageToChat('assistant', data.response);
                    }
                    
                    if (data.interview_ended) {
                        interviewEnded = true;
                        await endInterview();
                    }
                } else {
                    hideProcessingSteps();
                    showError(data.error || 'Ses işlenemedi');
                    
                    if (data.continue_listening && !interviewEnded) {
                        setTimeout(async () => {
                            if (isAutoMode) {
                                updateAvatarState('listening');
                                updateStatus('Sesinizi bekliyorum...', 'auto');
                                startVoiceDetection();
                            }
                        }, 1000);
                    }
                }
            } catch (error) {
                hideProcessingSteps();
                console.error('Sunucu hatası:', error);
                showError('Sunucu ile iletişim hatası: ' + error.message);
                
                if (!interviewEnded) {
                    setTimeout(async () => {
                        if (isAutoMode) {
                            updateAvatarState('listening');
                            updateStatus('Sesinizi bekliyorum...', 'auto');
                            startVoiceDetection();
                        }
                    }, 1000);
                }
            }
        }

        function stopVoiceDetection() {
            console.log('Ses algılama manuel olarak durduruluyor...');
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
            }
            isRecording = false;
            silenceStart = null;
            
            // Ses akışını tamamen durdur
            if (audioStream) {
                audioStream.getTracks().forEach(track => track.stop());
            }
            
            // AudioContext'i askıya al
            if (audioContext) {
                audioContext.suspend();
            }
            
            isAutoMode = false;
            updateStatus('Manuel moda geçildi', 'manual');
            updateAvatarState('idle');
        }

        function showProcessingSteps() {
            if (!document.querySelector('.processing-steps')) {
                const stepsDiv = document.createElement('div');
                stepsDiv.className = 'processing-steps';
                stepsDiv.innerHTML = `
                    <div class="processing-step" data-step="transcribe">
                        <i class="fas fa-microphone"></i>
                        <span>Ses tanınıyor...</span>
                    </div>
                    <div class="processing-step" data-step="evaluate">
                        <i class="fas fa-brain"></i>
                        <span>Değerlendiriliyor...</span>
                    </div>
                    <div class="processing-step" data-step="respond">
                        <i class="fas fa-comment"></i>
                        <span>Yanıt hazırlanıyor...</span>
                    </div>
                `;
                document.body.appendChild(stepsDiv);
            }

            const stepsElement = document.querySelector('.processing-steps');
            stepsElement.style.display = 'block';
            
            // Status indicator'ı yukarı kaydır
            const statusIndicator = document.querySelector('.status-indicator');
            if (statusIndicator) {
                statusIndicator.style.bottom = '160px';
            }
        }

        function hideProcessingSteps() {
            const stepsElement = document.querySelector('.processing-steps');
            if (stepsElement) {
                stepsElement.style.display = 'none';
                // Tüm adımları sıfırla
                document.querySelectorAll('.processing-step').forEach(step => {
                    step.className = 'processing-step';
                });
                
                // Status indicator'ı eski konumuna getir
                const statusIndicator = document.querySelector('.status-indicator');
                if (statusIndicator) {
                    statusIndicator.style.bottom = '80px';
                }
            }
        }

        function updateProcessingStep(stepName, status) {
            const step = document.querySelector(`.processing-step[data-step="${stepName}"]`);
            if (step) {
                // Önce mevcut sınıfları temizle
                step.className = 'processing-step';
                
                // Yeni durumu ekle
                step.classList.add(status);
                
                // İkonu güncelle
                const icon = step.querySelector('i');
                if (icon) {
                    if (status === 'active') {
                        icon.className = 'fas fa-spinner step-spinner';
                    } else if (status === 'completed') {
                        icon.className = 'fas fa-check text-green-500';
                    } else {
                        // Varsayılan ikonları geri yükle
                        switch(stepName) {
                            case 'transcribe':
                                icon.className = 'fas fa-microphone';
                                break;
                            case 'evaluate':
                                icon.className = 'fas fa-brain';
                                break;
                            case 'respond':
                                icon.className = 'fas fa-comment';
                                break;
                        }
                    }
                }
            }
        }

        // WebM'den WAV'a dönüştürme fonksiyonu
        async function convertToWav(webmBlob) {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const arrayBuffer = await webmBlob.arrayBuffer();
            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
            
            const numberOfChannels = 1;
            const length = audioBuffer.length;
            const sampleRate = 16000;
            const buffer = audioContext.createBuffer(numberOfChannels, length, sampleRate);
            
            // Ses verilerini kopyala
            const channelData = audioBuffer.getChannelData(0);
            buffer.copyToChannel(channelData, 0);
            
            // WAV formatına dönüştür
            const wavData = audioBufferToWav(buffer);
            return new Blob([wavData], { type: 'audio/wav' });
        }

        // AudioBuffer'ı WAV formatına dönüştürme
        function audioBufferToWav(buffer) {
            const numberOfChannels = 1;
            const sampleRate = 16000;
            const format = 1; // PCM
            const bitDepth = 16;
            
            const bytesPerSample = bitDepth / 8;
            const blockAlign = numberOfChannels * bytesPerSample;
            
            const buffer32 = new Int32Array(44 + buffer.length * bytesPerSample);
            const view = new DataView(buffer32.buffer);
            
            // WAV header
            writeString(view, 0, 'RIFF');
            view.setUint32(4, 36 + buffer.length * bytesPerSample, true);
            writeString(view, 8, 'WAVE');
            writeString(view, 12, 'fmt ');
            view.setUint32(16, 16, true);
            view.setUint16(20, format, true);
            view.setUint16(22, numberOfChannels, true);
            view.setUint32(24, sampleRate, true);
            view.setUint32(28, sampleRate * blockAlign, true);
            view.setUint16(32, blockAlign, true);
            view.setUint16(34, bitDepth, true);
            writeString(view, 36, 'data');
            view.setUint32(40, buffer.length * bytesPerSample, true);
            
            // Ses verilerini yaz
            const data = buffer.getChannelData(0);
            let offset = 44;
            for (let i = 0; i < data.length; i++, offset += 2) {
                const sample = Math.max(-1, Math.min(1, data[i]));
                view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
            }
            
            return buffer32.buffer;
        }

        function writeString(view, offset, string) {
            for (let i = 0; i < string.length; i++) {
                view.setUint8(offset + i, string.charCodeAt(i));
            }
        }

        function addMessageToChat(role, message) {
            // Mesajı geçmişe ekle
            chatHistory.push({
                role: role,
                content: message
            });

            // Önceki mesajları temizle
            const existingMessages = document.querySelectorAll(`.chat-bubble.${role}-bubble`);
            existingMessages.forEach(msg => {
                msg.classList.add('fade-out');
                setTimeout(() => msg.remove(), 300);
            });

            // Yeni mesaj oluştur
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-bubble ${role}-bubble`;
            
            // Mesaj içeriği
            const content = document.createElement('div');
            content.className = 'message-content';
            
            // İkon container
            const iconContainer = document.createElement('div');
            iconContainer.className = 'message-icon';
            iconContainer.innerHTML = `<i class="fas fa-${role === 'assistant' ? 'robot' : 'user'} text-lg"></i>`;
            
            // Mesaj metni
            const textContainer = document.createElement('div');
            textContainer.className = 'message-text';
            textContainer.textContent = message;
            
            // Elementleri birleştir
            content.appendChild(iconContainer);
            content.appendChild(textContainer);
            messageDiv.appendChild(content);
            
            // Mesajı ekle
            const chatContainer = document.getElementById('messages');
            chatContainer.appendChild(messageDiv);
            
            // Animasyon için timeout
            requestAnimationFrame(() => {
                messageDiv.classList.add('active');
            });

            // Robot animasyonunu güncelle
            if (role === 'assistant') {
                updateAvatarState('speaking');
            }
        }

        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in';
            errorDiv.style.animation = 'fadeIn 0.3s ease-in-out';
            errorDiv.textContent = message;
            
            // Hata mesajı için animasyonlar
            errorDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background-color: #ef4444;
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                z-index: 9999;
                animation: fadeIn 0.3s ease-in-out;
            `;
            
            // Keyframes ekle
            const style = document.createElement('style');
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-20px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                @keyframes fadeOut {
                    from { opacity: 1; transform: translateY(0); }
                    to { opacity: 0; transform: translateY(-20px); }
                }
            `;
            document.head.appendChild(style);
            
            document.body.appendChild(errorDiv);
            
            // 3 saniye sonra kaldır
            setTimeout(() => {
                errorDiv.style.animation = 'fadeOut 0.3s ease-in-out';
                setTimeout(() => {
                    errorDiv.remove();
                }, 300);
            }, 3000);
        }

        async function endInterview() {
            if (interviewEnded) return;
            
            try {
                updateStatus('Mülakat sonlandırılıyor...', 'processing');
                
                // Tüm kaynakları temizle
                if (isRecording) {
                    await stopRecording();
                }
                
                // Kamerayı kapat
                stopCamera();
                
                // Mülakatı sonlandır
                interviewEnded = true;
                
                // Mod butonlarını gizle
                document.getElementById('modeButtonsContainer').style.display = 'none';
                
                // Mod durumu barını gizle
                document.getElementById('modStatusBar').style.display = 'none';
                
                // Mülakat durumunu kaydet
                await fetch('/save_interview_state', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code: interviewCode,
                        conversation_history: chatHistory,
                        ended: true
                    })
                });
                
                // Son mesajı kontrol et
                let lastMessage = '';
                if (chatHistory.length > 0) {
                    lastMessage = chatHistory[chatHistory.length - 1].content || '';
                }
                
                // Tamamlanma mesajını göster
                addMessageToChat('assistant', 'Mülakat tamamlandı. Teşekkür ederiz. Raporunuz oluşturuluyor...');
                await speakResponse('Mülakat tamamlandı. Teşekkür ederiz. Raporunuz oluşturuluyor...');
                
                // Rapor oluştur
                const reportResult = await generateReport();
                
                updateStatus('Mülakat tamamlandı', 'completed');
                document.getElementById('duftechAvatar').classList.add('completed');
                
                // Sonuç mesajını göster
                const resultContainer = document.createElement('div');
                resultContainer.className = 'flex items-center justify-center my-8';
                resultContainer.innerHTML = `
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6 text-center max-w-lg">
                        <div class="text-green-600 text-5xl mb-4">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <h2 class="text-xl font-bold text-green-800 mb-2">Mülakat Tamamlandı!</h2>
                        <p class="text-green-700 mb-4">Rapor başarıyla oluşturuldu.</p>
                        <a href="/reports/${interviewCode}_report.pdf" target="_blank" 
                           class="report-button">
                            <i class="fas fa-file-pdf mr-2"></i>Raporu İndir
                        </a>
                    </div>
                `;
                document.getElementById('messages').appendChild(resultContainer);
                
            } catch (error) {
                console.error('Mülakat bitirme hatası:', error);
                showError('Mülakat sonlandırılırken bir hata oluştu: ' + error.message);
            }
        }

        async function generateReport() {
            try {
                console.log('Rapor oluşturma başlatılıyor...', chatHistory);
                
                // Rapor oluşturma isteği gönder
                const response = await fetch('/generate_report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        interview_code: interviewCode,
                        conversation_history: chatHistory
                    })
                });

                const data = await response.json();
                console.log('Rapor yanıtı:', data);

                if (data.success) {
                    showSuccess('Rapor başarıyla oluşturuldu!');
                    
                    // Rapor URL'i oluştur
                    const reportUrl = `/reports/${interviewCode}_report.pdf`;
                    
                    // Mevcut indirme butonunun doğru çalışması için
                    setTimeout(() => {
                        const downloadLinks = document.querySelectorAll('a[href*="_report.pdf"]');
                        downloadLinks.forEach(link => {
                            link.href = reportUrl;
                            link.addEventListener('click', function(e) {
                                e.preventDefault();
                                window.open(reportUrl, '_blank');
                            });
                        });
                    }, 500);
                    
                    return true;
                } else {
                    throw new Error(data.error || 'Rapor oluşturma hatası');
                }
            } catch (error) {
                console.error('Rapor oluşturma hatası:', error);
                showError('Rapor oluşturulurken bir hata oluştu: ' + error.message);
                return false;
            }
        }

        function showSuccess(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
            successDiv.textContent = message;
            document.body.appendChild(successDiv);
            
            setTimeout(() => {
                successDiv.remove();
            }, 5000);
        }

        // Avatar durumunu güncelleyen fonksiyon
        function updateAvatarState(state) {
            const avatar = document.getElementById('duftechAvatar');
            if (!avatar) {
                console.error('Avatar öğesi bulunamadı');
                return;
            }
            
            // Önceki tüm durumları temizle
            avatar.classList.remove('speaking', 'listening', 'idle', 'processing', 'completed');
            
            // Yeni durumu ekle
            avatar.classList.add(state);
        }

        // Gerçek zamanlı sohbet için SSE kullanımı
        async function startRealtimeChat(message) {
            try {
                const response = await fetch('/realtime_chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('interview_token')}`
                    },
                    body: JSON.stringify({
                        message: message,
                        session_id: localStorage.getItem('interview_session_id')
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const reader = response.body.getReader();
                const decoder = new TextDecoder();

                while (true) {
                    const {value, done} = await reader.read();
                    if (done) break;

                    const chunk = decoder.decode(value);
                    const lines = chunk.split('\n');

                    for (const line of lines) {
                        if (line.startsWith('data: ')) {
                            try {
                                const data = JSON.parse(line.slice(6));
                                if (data.text) {
                                    addMessageToChat('assistant', data.text);
                                    await speakResponse(data.text);
                                }
                            } catch (e) {
                                console.error('JSON parse hatası:', e);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('Gerçek zamanlı sohbet hatası:', error);
                showError('Bağlantı hatası: ' + error.message);
            }
        }

        // Süre sayacı fonksiyonları
        function startTimer() {
            interviewStartTime = new Date();
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        }

        function stopTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
            }
        }

        function updateTimer() {
            if (!interviewStartTime) return;
            
            const now = new Date();
            const diff = now - interviewStartTime;
            const minutes = Math.floor(diff / 60000);
            const seconds = Math.floor((diff % 60000) / 1000);
            
            document.getElementById('interviewTimer').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // Kamera işlemleri
        async function initCamera() {
            try {
                if (!cameraActive) {
                    // Kamera erişimi için izin iste
                    videoStream = await navigator.mediaDevices.getUserMedia({ 
                        video: { 
                            width: { ideal: 1280 },
                            height: { ideal: 720 },
                            facingMode: "user" 
                        } 
                    });
                    
                    const videoElement = document.getElementById('videoElement');
                    videoElement.srcObject = videoStream;
                    
                    // Kamera konteynerini göster
                    document.getElementById('cameraContainer').style.display = 'block';
                    cameraActive = true;
                    
                    // Rastgele fotoğraf çekme zamanlamasını başlat
                    startRandomPhotoCapture();
                }
            } catch (error) {
                console.error('Kamera erişim hatası:', error);
                showError('Kamera erişimi sağlanamadı: ' + error.message);
            }
        }
        
        function startRandomPhotoCapture() {
            // Rastgele zamanlarda fotoğraf çekme
            photoInterval = setInterval(() => {
                // 10-30 saniye arasında rastgele bir süre sonra fotoğraf çek
                const randomDelay = Math.floor(Math.random() * 20000) + 10000; // 10-30 saniye arası
                
                // Son fotoğraftan bu yana yeterli süre geçtiyse
                const now = Date.now();
                if (now - lastPhotoTime > randomDelay) {
                    capturePhoto();
                    lastPhotoTime = now;
                }
            }, 5000); // 5 saniyede bir kontrol et
        }
        
        function capturePhoto() {
            if (!cameraActive) return;
            
            const video = document.getElementById('videoElement');
            const canvas = document.getElementById('photoCanvas');
            const photoFlash = document.getElementById('photoFlash');
            
            // Canvas boyutunu video boyutuna ayarla
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            
            // Fotoğraf çek
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // Flaş efekti
            photoFlash.classList.add('active');
            setTimeout(() => {
                photoFlash.classList.remove('active');
            }, 300);
            
            // Fotoğrafı base64 formatına çevir
            const photoData = canvas.toDataURL('image/jpeg');
            
            // Fotoğrafı sunucuya gönder
            sendPhotoToServer(photoData);
            
            photoCounter++;
        }
        
        async function sendPhotoToServer(photoData) {
            try {
                const response = await fetch('/save_photo', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        code: interviewCode,
                        photo: photoData,
                        timestamp: new Date().toISOString()
                    })
                });
                
                const data = await response.json();
                if (!data.success) {
                    console.error('Fotoğraf kaydedilemedi:', data.error);
                }
            } catch (error) {
                console.error('Fotoğraf gönderme hatası:', error);
            }
        }
        
        // Kamerayı kapat
        function stopCamera() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
            }
            
            if (photoInterval) {
                clearInterval(photoInterval);
                photoInterval = null;
            }
            
            document.getElementById('cameraContainer').style.display = 'none';
            cameraActive = false;
        }

        function addDownloadButton(reportUrl) {
            const container = document.querySelector('.chat-container');
            const downloadDiv = document.createElement('div');
            downloadDiv.className = 'fixed bottom-4 right-4 flex gap-4';
            
            const downloadButton = document.createElement('button');
            downloadButton.className = 'bg-indigo-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-indigo-700 transition-colors';
            downloadButton.innerHTML = '<i class="fas fa-download mr-2"></i>Raporu İndir';
            downloadButton.onclick = () => {
                const link = document.createElement('a');
                link.href = reportUrl;
                link.download = `mulakat_raporu_${new Date().toISOString().slice(0,10)}.pdf`;
                link.click();
            };
            
            downloadDiv.appendChild(downloadButton);
            container.appendChild(downloadDiv);
        }

        // TTS desteğini kontrol eden fonksiyon
        function checkTtsSupport() {
            if ('speechSynthesis' in window) {
                console.log('Web Speech API destekleniyor');
                // Sesler hazır olduğunda çağrılacak
                window.speechSynthesis.onvoiceschanged = function() {
                    const voices = window.speechSynthesis.getVoices();
                    console.log(`${voices.length} ses bulundu`);
                };
            } else {
                console.warn('Web Speech API desteklenmiyor');
            }
        }

        // Ses kaydı işleme sistemini kuran fonksiyon
        async function setupAudioProcessing(stream) {
            try {
                console.log("setupAudioProcessing başlatıldı");
                // Önceki ses akışını temizle
                if (audioStream) {
                    audioStream.getTracks().forEach(track => track.stop());
                }
                
                // Yeni ses akışını kaydet
                audioStream = stream;
                
                // AudioContext oluştur
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                const source = audioContext.createMediaStreamSource(audioStream);
                source.connect(analyser);
                analyser.fftSize = 2048;
                
                // MediaRecorder'ı ayarla
                mediaRecorder = new MediaRecorder(audioStream, {
                    mimeType: 'audio/webm;codecs=opus',
                    audioBitsPerSecond: 16000
                });
                
                mediaRecorder.ondataavailable = (event) => {
                    if (!isGPTSpeaking && event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };
                
                mediaRecorder.onstop = async () => {
                    if (!isGPTSpeaking && audioChunks.length > 0) {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                        if (audioBlob.size > 0) {
                            try {
                                await processAudio(audioBlob);
                            } catch (error) {
                                console.error('Ses işleme hatası:', error);
                            }
                        }
                        audioChunks = [];
                    }
                };
                
                // Ses seviyesi kontrolünü başlat
                if (typeof checkAudioLevel === 'function') {
                    console.log("checkAudioLevel fonksiyonu çağrılıyor");
                    requestAnimationFrame(checkAudioLevel);
                } else {
                    console.error("checkAudioLevel fonksiyonu tanımlı değil!");
                }
                
                isMediaRecorderReady = true;
                isAudioInitialized = true;
                console.log("setupAudioProcessing başarıyla tamamlandı");
                
                return true;
            } catch (error) {
                console.error('Ses sistemi başlatma hatası:', error);
                showError('Mikrofon erişimi sağlanamadı');
                return false;
            }
        }

        // Sohbet balonu oluşturan fonksiyon
        function createChatBubble(role, message) {
            const messagesContainer = document.getElementById('messages');
            if (!messagesContainer) {
                console.error('Mesaj konteyneri bulunamadı');
                return;
            }
            
            // Önceki mesajları temizle (eğer çok fazla varsa)
            const allBubbles = document.querySelectorAll('.chat-bubble');
            if (allBubbles.length > 10) {
                allBubbles[0].remove(); // En eski mesajı kaldır
            }
            
            // Sınıf ve pozisyon
            const bubbleType = role === 'assistant' ? 'assistant-bubble' : 'user-bubble';
            const positions = ['position-1', 'position-2', 'position-3', 'position-4', 'position-5', 'position-6'];
            const position = positions[Math.floor(Math.random() * positions.length)];
            
            // Yeni balon oluştur
            const bubble = document.createElement('div');
            bubble.className = `chat-bubble ${bubbleType} ${position}`;
            
            // İçerik
            const content = document.createElement('div');
            content.className = 'message-content';
            
            // İkon
            const icon = document.createElement('div');
            icon.className = 'message-icon';
            
            if (role === 'assistant') {
                icon.innerHTML = '<i class="fas fa-robot"></i>';
            } else {
                icon.innerHTML = '<i class="fas fa-user"></i>';
            }
            
            // Metin
            const text = document.createElement('div');
            text.className = 'message-text';
            text.textContent = message;
            
            // Bileşenleri bir araya getir
            content.appendChild(icon);
            content.appendChild(text);
            bubble.appendChild(content);
            messagesContainer.appendChild(bubble);
            
            // Animasyon için setTimeout
            setTimeout(() => {
                bubble.classList.add('active');
            }, 10);
            
            return bubble;
        }

        // Buton dinleyicilerini ayarlayan fonksiyon
        function setupButtonListeners() {
            console.log('Buton dinleyicileri ayarlanıyor...');
            
            // Ana başlatma butonu
            const modeButton = document.getElementById('modeButton');
            if (modeButton) {
                modeButton.addEventListener('click', startInterview);
            } else {
                console.error('modeButton bulunamadı');
            }
            
            // Manuel mod butonu
            const manualModeButton = document.getElementById('manualModeButton');
            if (manualModeButton) {
                manualModeButton.addEventListener('click', function() {
                    enableManualMode();
                });
            } else {
                console.error('manualModeButton bulunamadı');
            }

            // Otomatik mod butonu
            const autoModeButton = document.getElementById('autoModeButton');
            if (autoModeButton) {
                autoModeButton.addEventListener('click', function() {
                    enableAutoMode();
                });
            } else {
                console.error('autoModeButton bulunamadı');
            }
            
            // Mülakat bitirme butonu
            const endInterviewButton = document.getElementById('endInterviewButton');
            if (endInterviewButton) {
                endInterviewButton.addEventListener('click', endInterview);
            } else {
                console.error('endInterviewButton bulunamadı');
            }
            
            // Klavye dinleyicileri - Manuel mod için Space tuşu desteği
            // NOT: Bu event listener'lar DOMContentLoaded içinde tanımlandı, burada tekrar tanımlamıyoruz
            /*
            document.addEventListener('keydown', function(event) {
                if (event.code === 'Space' && !isAutoMode && !isGPTSpeaking && !isRecording && !interviewEnded) {
                    event.preventDefault(); // Sayfanın aşağı kaymasını engelle
                    startRecording();
                    updateStatus('Kayıt yapılıyor...', 'recording');
                    manualModeButton.classList.add('active');
                    manualModeButton.innerHTML = '<i class="fas fa-microphone record-indicator"></i><span>Kaydediliyor...</span>';
                }
            });

            document.addEventListener('keyup', function(event) {
                if (event.code === 'Space' && !isAutoMode && isRecording && !interviewEnded) {
                    stopRecording();
                    updateStatus('İşleniyor...', 'processing');
                    manualModeButton.classList.remove('active');
                    manualModeButton.innerHTML = '<i class="fas fa-hand"></i><span>Manuel Mod</span>';
                }
            });
            */
            
            console.log('Buton dinleyicileri ayarlandı');
        }
        
        // Tüm kayıt durum değişkenlerini sıfırla
        function resetRecordingState() {
            console.log("Kayıt durumu sıfırlandı");
            isRecording = false;
            audioChunks = [];
            
            // Eğer bir MediaRecorder varsa ve aktifse, durdur
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                try {
                    mediaRecorder.stop();
                } catch (e) {
                    console.warn("MediaRecorder durdurma hatası:", e);
                }
            }
            
            // Görsel geri bildirimleri kapat
            document.getElementById('statusDot').classList.remove('recording');
            document.getElementById('manualModeButton').classList.remove('recording-active');
            document.body.classList.remove('recording-active');
        }

        // Mevcut kod içerisine eklenecek kısımlar
        async function startInterview() {
            try {
                console.log("startInterview fonksiyonu başlatıldı");
                
                // Mülakata başla butonu yerine mod butonlarını göster
                const startButton = getElement('startButton', ['modeButton']);
                const modeButtonsContainer = getElement('modeButtonsContainer');
                
                if (startButton && modeButtonsContainer) {
                    startButton.style.display = 'none';
                    modeButtonsContainer.classList.remove('hidden');
                } else {
                    console.error("startButton veya modeButtonsContainer bulunamadı");
                    showError('Arayüz öğesi eksik');
                    return;
                }
                
                // Mod durum barını göster - En üstte
                const modStatusBar = document.getElementById('modStatusBar');
                if (modStatusBar) {
                    modStatusBar.style.display = 'block';
                    
                    // Header pozisyonunu ayarla
                    const header = document.querySelector('.header');
                    if (header) {
                        header.style.top = '36px'; // Mod bilgi çubuğunun altı
                    }
                }
                
                // Kamera konteynerini sağ üste taşı 
                const cameraContainer = document.getElementById('cameraContainer');
                if (cameraContainer) {
                    cameraContainer.style.top = '150px'; // Daha aşağıda
                    cameraContainer.style.right = '35px'; // Daha sağda
                    cameraContainer.style.width = '160px';
                    cameraContainer.style.height = '120px';
                }
                
                // Mod bilgisi göstergesini ayarla
                const modeInfo = getElement('modeInfo');
                const autoModeInfo = getElement('autoModeInfo');
                
                if (modeInfo) modeInfo.classList.remove('hidden');
                if (autoModeInfo) autoModeInfo.classList.remove('hidden');
                
                // Varsayılan olarak otomatik modu etkinleştir
                const toggleBtn = getElement('toggleModeButton');
                if (toggleBtn) {
                    toggleBtn.innerHTML = '<i class="fas fa-microphone-alt"></i><span>Otomatik Mod</span>';
                    toggleBtn.classList.remove('manual');
                }
                isAutoMode = true;
                
                // Kayıt izni iste
                console.log("Mikrofon erişimi isteniyor...");
                
                try {
                    // Mikrofon erişimini başlat
                    const initialized = await initAudio();
                    if (!initialized) {
                        showError('Mikrofon erişimi sağlanamadı');
                        return;
                    }
                    
                    // Mülakat başlatma API'sini çağır
                    const response = await fetch('/start_interview', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            code: interviewCode
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Mülakat başarıyla başlatıldı
                        console.log("Mülakat başarıyla başlatıldı:", data);
                        createChatBubble('assistant', data.welcome_message);
                        
                        // Otomatik modu başlat
                        updateStatus('Ses seviyeniz algılandığında kayıt başlar', 'auto');
                        updateAvatarState('listening');
                        
                        // Ses algılamayı başlat
                        startVoiceDetection();
                        
                        // Mülakat zamanını başlat
                        if (typeof startInterviewTimer === 'function') {
                            startInterviewTimer();
                        } else {
                            // Fallback: Timer yönetimi
                            interviewStartTime = new Date();
                            updateTimer();
                            timerInterval = setInterval(updateTimer, 1000);
                        }
                    } else {
                        showError(data.error || 'Mülakat başlatılamadı');
                    }
                } catch (error) {
                    console.error('Mikrofon hatası:', error);
                    showError('Mikrofon erişim izni verilmedi');
                }
            } catch (error) {
                console.error('Mülakat başlatma hatası:', error);
                showError('Mülakat başlatılamadı');
            }
        }
        
        // Ses seviyesini kontrol eden fonksiyon güncelleniyor
        function checkAudioLevel() {
            if (!analyser) {
                requestAnimationFrame(checkAudioLevel);
                return;
            }
            
            try {
                const dataArray = new Uint8Array(analyser.frequencyBinCount);
                analyser.getByteFrequencyData(dataArray);
                
                // Ses seviyesini hesapla (güçlendirilmiş)
                let sum = 0;
                const len = dataArray.length;
                
                // Tüm frekans bandını topla
                for (let i = 0; i < len; i++) {
                    sum += dataArray[i];
                }
                
                // 0-1 arasında normalize et ve biraz vurgu yap
                const rawVolume = sum / (len * 255);
                const volume = Math.pow(rawVolume, 0.5); // Düşük sesleri daha fazla yükselt
                
                // Her 30 kare'de bir ses seviyesini logla
                if (Math.random() < 0.03) { // yaklaşık her 30 framede bir
                    console.log(`Güncel ses seviyesi: ${volume.toFixed(4)} - Eşikler: sessizlik=${SILENCE_THRESHOLD}, konuşma=${VOICE_THRESHOLD}`);
                }
                
                // Ses göstergesini güncelle
                updateVolumeIndicator(volume);
                
                // Otomatik mod ve sessize geçiş kontrolü
                if (isAutoMode && !isGPTSpeaking && !interviewEnded) {
                    // Ses seviyesi eşiğini geçtiyse ve kayıt yapmıyorsak başlat
                    if (volume > VOICE_THRESHOLD && !isRecording) {
                        console.log(`SES ALGILANDI (${volume.toFixed(4)} > ${VOICE_THRESHOLD}) - Kayıt başlatılıyor`);
                        startRecording();
                        document.body.classList.add('recording-active');
                    } 
                    // Kayıt yapıyorsak sessizlik kontrolü
                    else if (isRecording) {
                        if (volume > VOICE_THRESHOLD) {
                            // Konuşma algılandı, sessizlik zamanlayıcısını sıfırla
                            if (silenceStart !== null) {
                                console.log('Sessizlik bitti, konuşma devam ediyor');
                            }
                            silenceStart = null;
                            if (silenceTimeout) {
                                clearTimeout(silenceTimeout);
                                silenceTimeout = null;
                            }
                        } else if (volume < SILENCE_THRESHOLD) {
                            // Sessizlik algılandı
                            if (!silenceStart) {
                                silenceStart = Date.now();
                                console.log('Sessizlik başladı');
                            } else {
                                const silenceTime = Date.now() - silenceStart;
                                if (silenceTime > SILENCE_DURATION && !silenceTimeout) {
                                    console.log(`Sessizlik süresi eşiği aşıldı (${silenceTime}ms > ${SILENCE_DURATION}ms)`);
                                    silenceTimeout = setTimeout(() => {
                                        silenceTimeout = null;
                                        if (isRecording) {
                                            console.log('Sessizlik eşiği aşıldı, kayıt durduruluyor');
                                            stopRecording();
                                            updateStatus('İşleniyor...', 'processing');
                                            document.body.classList.remove('recording-active');
                                        }
                                    }, 300); // Biraz bekleyip kaydı durdur
                                }
                            }
                        }
                    }
                }
                
                requestAnimationFrame(checkAudioLevel);
            } catch (e) {
                console.error('Ses seviyesi kontrolü hatası:', e);
                requestAnimationFrame(checkAudioLevel);
            }
        }

        // Mülakat zamanını başlatan fonksiyon
        function startInterviewTimer() {
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            interviewStartTime = new Date();
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        }

        // DOM elementlerini güvenli bir şekilde bulmak için yardımcı fonksiyon
        function getElement(id, fallbackIds = []) {
            let element = document.getElementById(id);
            
            // Eğer element bulunamazsa fallback ID'leri dene
            if (!element && fallbackIds && fallbackIds.length > 0) {
                for (const fallbackId of fallbackIds) {
                    element = document.getElementById(fallbackId);
                    if (element) break;
                }
            }
            
            return element;
        }

        // Modal işlemleri için fonksiyonlar
        function showModal() {
            document.getElementById('infoModal').style.display = 'flex';
        }

        function closeModal() {
            document.getElementById('infoModal').style.display = 'none';
        }

        // Gecikme ile kayıt başlatan yeni fonksiyon
        function startRecordingWithTimeout(delay) {
            // Önce kayıt durumunu güncelle
            isRecording = true;
            audioChunks = [];
            
            // Belirtilen gecikme sonrasında kaydı başlat
            setTimeout(function() {
                if (!isRecording) {
                    console.log("Kayıt iptal edilmiş");
                    return;
                }
                
                try {
                    // Yeni bir MediaRecorder oluştur
                    mediaRecorder = new MediaRecorder(audioStream, {
                        mimeType: 'audio/webm',
                        audioBitsPerSecond: 128000
                    });
                    
                    // dataavailable olayını işle
                    mediaRecorder.ondataavailable = function(event) {
                        if (event.data.size > 0) {
                            audioChunks.push(event.data);
                            console.log(`Chunk eklendi, yeni boyut: ${event.data.size} bytes`);
                        }
                    };
                    
                    // Hata olayını işle
                    mediaRecorder.onerror = function(err) {
                        console.error("MediaRecorder hatası:", err);
                        resetRecordingState();
                    };
                    
                    // Kayıt durdurma olayını işle
                    mediaRecorder.onstop = function() {
                        console.log(`MediaRecorder durduruldu, toplam chunk sayısı: ${audioChunks.length}`);
                        
                        if (audioChunks.length === 0) {
                            console.warn("Ses verisi bulunamadı!");
                            return;
                        }
                        
                        var audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                        console.log(`Ses kaydı tamamlandı, boyut: ${audioBlob.size} bytes`);
                        processAudio(audioBlob);
                    };
                    
                    // Kaydı başlat ve durum güncelle
                    mediaRecorder.start(100); // 100ms aralıklarla chunk toplama
                    console.log("Kayıt başlatıldı");
                    
                } catch (err) {
                    console.error("MediaRecorder başlatma hatası:", err);
                    resetRecordingState();
                }
            }, delay);
        }

        // Space tuşu ile manuel kayıt mekanizması - DOMContentLoaded içinde tanımlandı
        /* 
        document.addEventListener('keydown', async function(e) {
            if (e.code === 'Space' && !isAutoMode && !interviewEnded) {
                e.preventDefault(); // Sayfanın aşağı kaymasını engelle
                
                // GPT konuşuyorsa kayıt yapmayı engelle
                if (isGPTSpeaking) {
                    showError('Lütfen GPT konuşmasının bitmesini bekleyin');
                    return;
                }
                
                if (!isRecording) {
                    console.log('Space tuşuna basıldı - Manuel kayıt başlatılıyor');
                    
                    // Görsel geri bildirim göster
                    document.getElementById('statusDot').style.backgroundColor = '#ef4444'; // Kırmızı
                    document.getElementById('statusText').textContent = 'Kaydediliyor...';
                    document.body.classList.add('recording-active');
                    
                    // MediaRecorder hazır değilse hazırla
                    if (!isMediaRecorderReady) {
                        await initAudio();
                    }
                    
                    // Kayıt başlat
                    startRecording();
                    updateAvatarState('listening');
                }
            }
        });

        document.addEventListener('keyup', function(e) {
            if (e.code === 'Space' && !isAutoMode && !interviewEnded) {
                e.preventDefault();
                
                if (isRecording) {
                    console.log('Space tuşu bırakıldı - Manuel kayıt durduruluyor');
                    
                    // Görsel geri bildirimi kapat
                    document.getElementById('statusDot').style.backgroundColor = '#6b7280'; // Gri
                    document.getElementById('statusText').textContent = 'Ses İşleniyor...';
                    document.body.classList.remove('recording-active');
                    
                    stopRecording();
                    updateAvatarState('idle');
                }
            }
        });
        */

        // Manuel mod etkinleştirme fonksiyonu
        function enableManualMode() {
            // Aktif kayıt varsa önce durdur
            if (isRecording) {
                stopRecording();
            }
            
            // Otomatik mod aktifse, önce ses algılamayı durdur
            if (isAutoMode && voiceDetectionInterval) {
                clearInterval(voiceDetectionInterval);
                voiceDetectionInterval = null;
            }
            
            isAutoMode = false;
            console.log("Mod değiştirildi: Manuel Mod (Space tuşu ile kaydet)");
            
            // Görsel geri bildirimleri güncelle
            document.getElementById('autoModeButton').classList.remove('active');
            document.getElementById('manualModeButton').classList.add('active');
            document.getElementById('autoModeInfo').style.display = 'none';
            document.getElementById('manualModeInfo').style.display = 'block';
            document.getElementById('statusText').textContent = "Manuel Mod Hazır (Space tuşuna basılı tutarak konuşun)";
            document.getElementById('modeStatus').textContent = "MANUEL MOD";
            document.getElementById('modeIcon').innerHTML = "🎙️";
            document.getElementById('modeIcon').classList.remove('auto-mode-active');
            
            // Avatar durumunu güncelle
            updateAvatarState('idle');
        }

        // Otomatik mod etkinleştirme fonksiyonu 
        function enableAutoMode() {
            // GPT konuşuyorsa mod değişimini engelle
            if (isGPTSpeaking) {
                showError('Lütfen GPT konuşmasının bitmesini bekleyin');
                return;
            }
            
            // Kayıt durumunu sıfırla
            resetRecordingState();
            
            isAutoMode = true;
            console.log("Mod değiştirildi: Otomatik Mod (Ses algılama aktif)");
            
            // Görsel geri bildirimleri güncelle
            document.getElementById('manualModeButton').classList.remove('active');
            document.getElementById('autoModeButton').classList.add('active');
            document.getElementById('manualModeInfo').style.display = 'none';
            document.getElementById('autoModeInfo').style.display = 'block';
            document.getElementById('statusText').textContent = "Otomatik Mod Aktif";
            document.getElementById('modeStatus').textContent = "OTOMATİK MOD";
            document.getElementById('modeIcon').innerHTML = "🎤";
            document.getElementById('modeIcon').classList.add('auto-mode-active');
            
            // Ses algılamayı başlat
            startVoiceDetection();
            
            // Avatar durumunu güncelle
            updateAvatarState('listening');
        }

        // Mode butonları için event listener'lar
        //        document.addEventListener('DOMContentLoaded', function() {
//            // Mod değiştirme butonu için event listener
//            const toggleModeButton = document.getElementById('toggleModeButton');
//            if (toggleModeButton) {
//                toggleModeButton.addEventListener('click', function() {
//                    if (!interviewEnded) {
//                        // Otomatik mod aktifse manuel moda geç, değilse otomatik moda geç
//                        if (isAutoMode) {
//                            enableManualMode();
//                        } else {
//                            enableAutoMode();
//                        }
//                    }
//                });
//            } else {
//                console.error('toggleModeButton elementi bulunamadı!');
//            }
//
//            /* Artık bu butonlar kullanılmadığı için bu kod parçası yorum satırı haline getirildi
//            // Manuel mod butonu
//            document.getElementById('manualModeButton').addEventListener('click', function() {
//                if (!interviewEnded) {
//                    enableManualMode();
//                }
//            });
//
//            // Otomatik mod butonu
//            document.getElementById('autoModeButton').addEventListener('click', function() {
//                if (!interviewEnded) {
                    enableAutoMode();
                }
            });
            */
        });

        // CSS stillerini aşağıdaki yolla ekliyoruz - tek seferde, DOMContentLoaded içinde değil
        (function() {
            // CSS stillerini ekle
            const style = document.createElement('style');
            style.textContent = `
                /* Kayıt durumunu gösteren daire (ortadaki animasyon için) */
                .record-indicator {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    width: 120px;
                    height: 120px;
                    border-radius: 50%;
                    background: rgba(239, 68, 68, 0.2);
                    box-shadow: 0 0 30px rgba(239, 68, 68, 0.3);
                    display: none;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                    pointer-events: none;
                }
                
                .recording-active .record-indicator {
                    display: flex;
                    animation: pulse 1.5s infinite;
                }
                
                @keyframes pulse {
                    0% { transform: translate(-50%, -50%) scale(1); opacity: 0.7; }
                    50% { transform: translate(-50%, -50%) scale(1.05); opacity: 1; }
                    100% { transform: translate(-50%, -50%) scale(1); opacity: 0.7; }
                }
                
                /* Mod butonları için animasyonlar */
                #manualModeButton.recording-active {
                    background: linear-gradient(135deg, #ef4444 0%, #f97316 100%) !important;
                    transform: scale(1.05);
                    box-shadow: 0 0 15px rgba(239, 68, 68, 0.5) !important;
                }
                
                /* Manuel mod için gülen yüz animasyonu */
                .smile-animation {
                    animation: bounce 1s infinite;
                    font-size: 40px;
                }
                
                @keyframes bounce {
                    0%, 100% { transform: translateY(0); }
                    50% { transform: translateY(-10px); }
                }
                
                /* Status dot animasyonu */
                #statusDot.recording {
                    animation: blink 1s infinite;
                    background-color: #ef4444 !important;
                }
                
                @keyframes blink {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
            `;
            document.head.appendChild(style);
        })();

        // Sayfa yüklendikten sonra toggle mode butonu için event listener ekler
        (function() {
            // DOMContentLoaded eventini beklemeden doğrudan çalışır
            const toggleModeButton = document.getElementById('toggleModeButton');
            if (toggleModeButton) {
                toggleModeButton.addEventListener('click', function() {
                    if (typeof interviewEnded !== 'undefined' && !interviewEnded) {
                        // Otomatik mod aktifse manuel moda geç, değilse otomatik moda geç
                        if (typeof isAutoMode !== 'undefined') {
                            if (isAutoMode) {
                                if (typeof enableManualMode === 'function') {
                                    enableManualMode();
                                }
                            } else {
                                if (typeof enableAutoMode === 'function') {
                                    enableAutoMode();
                                }
                            }
                        }
                    }
                });
                console.log('Toggle mode butonu için event listener başarıyla eklendi');
            } else {
                console.error('toggleModeButton elementi bulunamadı!');
            }
        })();
    </script>
</body>
</html> 